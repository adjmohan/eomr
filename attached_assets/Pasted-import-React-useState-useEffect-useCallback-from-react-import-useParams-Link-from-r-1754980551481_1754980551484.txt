import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link } from 'react-router-dom';
import axios from 'axios';
import toast from 'react-hot-toast';
import { 
  Download, 
  FileText, 
  Printer, 
  ArrowLeft
  // Removed: BarChart3
} from 'lucide-react';

const ResultsPage = () => {
  const { batchCode } = useParams();
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchResults = useCallback(async () => {
    try {
      setLoading(true);
      const response = await axios.get(`/api/results/${batchCode}`);
      setResults(response.data);
      
      // Show success message with data source info
      if (response.data.dataSource === 'memory') {
        toast.success('Results loaded from temporary storage (database unavailable)');
      } else if (response.data.dataSource === 'database') {
        toast.success('Results loaded from database');
      }
    } catch (error) {
      console.error('Error fetching results:', error);
      const errorMessage = error.response?.data?.message || 'Failed to fetch results';
      const suggestion = error.response?.data?.suggestion || '';
      setError(`${errorMessage}${suggestion ? ` - ${suggestion}` : ''}`);
      toast.error('Failed to load results');
    } finally {
      setLoading(false);
    }
  }, [batchCode]); // Added fetchResults to dependency array

  useEffect(() => {
    fetchResults();
  }, [fetchResults]); // Added fetchResults to dependency array

  const exportToExcel = async () => {
    try {
      const response = await axios.get(`/api/export/excel/${batchCode}`, {
        responseType: 'blob'
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `${batchCode}_results.xlsx`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      toast.success('Excel file downloaded successfully');
    } catch (error) {
      toast.error('Failed to export to Excel');
    }
  };

  const exportToPDF = async () => {
    try {
      const response = await axios.get(`/api/export/pdf/${batchCode}`, {
        responseType: 'blob'
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `${batchCode}_results.html`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      toast.success('HTML file downloaded successfully! Open it in your browser and use Ctrl+P to save as PDF.');
    } catch (error) {
      toast.error('Failed to export to HTML');
    }
  };

  const handlePrint = () => {
    window.print();
    toast.success('Print dialog opened');
  };

  const updateRemark = async (subject, remark) => {
    try {
      await axios.put(`/api/results/${batchCode}/remark`, {
        subject,
        remark
      });
      toast.success('Remark updated successfully');
    } catch (error) {
      toast.error('Failed to update remark');
    }
  };

  const getSubjectColor = (subject) => {
    const colors = {
      physics: '#3b82f6',
      chemistry: '#10b981',
      maths: '#f59e0b',
      mathematics: '#f59e0b',
      english: '#8b5cf6',
      social: '#f97316',
      language: '#ec4899',
      mat: '#06b6d4',
      botany: '#84cc16',
      zoology: '#14b8a6',
      computer: '#ef4444',
      biology: '#84cc16',
      history: '#f97316',
      geography: '#10b981',
      economics: '#8b5cf6'
    };
    return colors[subject.toLowerCase()] || '#6b7280';
  };

  const getPerformanceLevel = (percentage) => {
    if (percentage >= 90) return { level: 'Excellent', color: '#10b981' };
    if (percentage >= 80) return { level: 'Very Good', color: '#3b82f6' };
    if (percentage >= 70) return { level: 'Good', color: '#f59e0b' };
    if (percentage >= 60) return { level: 'Average', color: '#f97316' };
    return { level: 'Needs Improvement', color: '#ef4444' };
  };



  if (loading) {
    return (
      <div className="results-container">
        <div className="loading">
          <div className="spinner"></div>
          <p>Loading results...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="results-container">
        <div className="error">
          <h2>Error Loading Results</h2>
          <p>{error}</p>
          <Link to="/" className="submit-btn" style={{ display: 'inline-block', marginTop: '20px' }}>
            <ArrowLeft size={20} />
            Back to Upload
          </Link>
        </div>
      </div>
    );
  }

  if (!results) {
    return (
      <div className="results-container">
        <div className="error">
          <h2>No Results Found</h2>
          <p>No results found for batch code: {batchCode}</p>
          <Link to="/" className="submit-btn" style={{ display: 'inline-block', marginTop: '20px' }}>
            <ArrowLeft size={20} />
            Back to Upload
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="results-container">
      {/* Header */}
      <div className="results-header">
        <div className="results-info">
          <h1>Batch Code: {results.batchCode}</h1>
          <p>Phase: {results.phase} ‚Ä¢ Total Students: {results.totalStudents}</p>
          {results.dataSource && (
            <div style={{ 
              display: 'flex', 
              alignItems: 'center', 
              gap: '10px', 
              marginTop: '8px',
              fontSize: '0.9rem'
            }}>
              <div style={{
                padding: '4px 8px',
                borderRadius: '12px',
                fontSize: '0.8rem',
                fontWeight: '500',
                background: results.dataSource === 'database' ? '#dcfce7' : '#fef3c7',
                color: results.dataSource === 'database' ? '#166534' : '#92400e'
              }}>
                {results.dataSource === 'database' ? 'üìä Database' : 'üíæ Memory'}
              </div>
              {results.mongodbStatus === 'disconnected' && (
                <div style={{
                  padding: '4px 8px',
                  borderRadius: '12px',
                  fontSize: '0.8rem',
                  fontWeight: '500',
                  background: '#fef2f2',
                  color: '#dc2626'
                }}>
                  ‚ö†Ô∏è Database Offline
                </div>
              )}
            </div>
          )}
        </div>
        <div className="export-buttons">
          <button onClick={exportToExcel} className="export-btn export-excel">
            <Download size={16} />
            Export to Excel
          </button>
          <button onClick={exportToPDF} className="export-btn export-pdf">
            <FileText size={16} />
            Export to HTML
          </button>
          <button onClick={handlePrint} className="export-btn export-print">
            <Printer size={16} />
            Print
          </button>
        </div>
      </div>

      {/* Subject Cards */}
      <div className="subjects-grid-results">
        {results.subjects.map((subject, index) => {
          const performance = getPerformanceLevel(subject.percentage);
          const isUploaded = subject.isUploaded !== false; // Default to true if not specified
          
          return (
            <div 
              key={index} 
              className={`subject-card ${subject.subject.toLowerCase()}`}
              style={{ 
                '--subject-color': getSubjectColor(subject.subject),
                opacity: isUploaded ? 1 : 0.6,
                border: isUploaded ? '2px solid var(--subject-color)' : '2px solid #e5e7eb'
              }}
            >
              <div className="subject-header">
                <div>
                  <h3 className="subject-name">{subject.subject}</h3>
                  <p className="teacher-name">Teacher: {subject.teacherName}</p>
                </div>
                <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
                  {!isUploaded && (
                    <div style={{
                      padding: '4px 8px',
                      background: '#f3f4f6',
                      color: '#6b7280',
                      borderRadius: '12px',
                      fontSize: '0.7rem',
                      fontWeight: '500'
                    }}>
                      Not Uploaded
                    </div>
                  )}
                  <div style={{ 
                    padding: '8px 12px', 
                    background: isUploaded ? (performance.color + '20') : '#f3f4f6', 
                    color: isUploaded ? performance.color : '#6b7280',
                    borderRadius: '20px',
                    fontSize: '0.8rem',
                    fontWeight: '600'
                  }}>
                    {isUploaded ? performance.level : 'No Data'}
                  </div>
                </div>
              </div>
              
              <div className="progress-bar">
                <div 
                  className="progress-fill"
                  style={{ 
                    width: `${subject.percentage}%`,
                    background: isUploaded ? 'var(--subject-color)' : '#d1d5db'
                  }}
                ></div>
              </div>
              
              <div className="percentage" style={{ color: isUploaded ? 'inherit' : '#6b7280' }}>
                {subject.percentage}%
              </div>
            </div>
          );
        })}
      </div>

      {/* Detailed Table */}
      <div className="summary-table">
        <h2>Detailed Subject Analysis</h2>
        <div style={{ 
          background: '#f8fafc', 
          padding: '15px', 
          borderRadius: '8px', 
          marginBottom: '20px',
          border: '1px solid #e2e8f0'
        }}>
          <h4 style={{ margin: '0 0 10px 0', color: '#374151' }}>üìä Rating System:</h4>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '10px' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              <div style={{ width: '12px', height: '12px', borderRadius: '50%', background: '#10b981' }}></div>
              <span><strong>Excellent:</strong> 5 points (90%+)</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              <div style={{ width: '12px', height: '12px', borderRadius: '50%', background: '#f59e0b' }}></div>
              <span><strong>Good:</strong> 3 points (70-89%)</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              <div style={{ width: '12px', height: '12px', borderRadius: '50%', background: '#ef4444' }}></div>
              <span><strong>Poor:</strong> 1 point (Below 70%)</span>
            </div>
          </div>
          <p style={{ margin: '10px 0 0 0', fontSize: '0.9rem', color: '#6b7280' }}>
            üí° <strong>Any marking style accepted:</strong> Ticks, crosses, shading, filled shapes, underlines, or any creative marking!
          </p>
        </div>


        <table className="table">
          <thead>
            <tr>
              <th>Subject</th>
              <th>Status</th>
              <th>Percentage</th>
              <th>Teacher Name</th>
              <th>Teacher Remark</th>
            </tr>
          </thead>
          <tbody>
            {results.subjects.map((subject, index) => {
              const isUploaded = subject.isUploaded !== false;
              return (
                <tr key={index} style={{ opacity: isUploaded ? 1 : 0.7 }}>
                  <td>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                      <div 
                        style={{ 
                          width: '12px', 
                          height: '12px', 
                          borderRadius: '50%', 
                          background: isUploaded ? getSubjectColor(subject.subject) : '#d1d5db' 
                        }}
                      ></div>
                      {subject.subject}
                    </div>
                  </td>
                  <td>
                    <div style={{
                      padding: '4px 8px',
                      borderRadius: '12px',
                      fontSize: '0.8rem',
                      fontWeight: '500',
                      background: isUploaded ? '#dcfce7' : '#f3f4f6',
                      color: isUploaded ? '#166534' : '#6b7280',
                      width: 'fit-content'
                    }}>
                      {isUploaded ? 'üìä Uploaded' : '‚ùå Not Uploaded'}
                    </div>
                  </td>
                  <td>
                    <span style={{ 
                      fontWeight: 'bold', 
                      color: isUploaded ? getSubjectColor(subject.subject) : '#6b7280' 
                    }}>
                      {subject.percentage}%
                    </span>
                  </td>
                  <td style={{ color: isUploaded ? 'inherit' : '#6b7280' }}>
                    {subject.teacherName}
                  </td>
                  <td>
                    <input
                      type="text"
                      className="remark-input"
                      placeholder={isUploaded ? "Enter remark" : "No data available"}
                      defaultValue={subject.remark || ''}
                      disabled={!isUploaded}
                      style={{ 
                        opacity: isUploaded ? 1 : 0.5,
                        cursor: isUploaded ? 'text' : 'not-allowed'
                      }}
                      onBlur={(e) => isUploaded && updateRemark(subject.subject, e.target.value)}
                    />
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* Back Button */}
      <div style={{ textAlign: 'center', marginTop: '40px' }}>
        <Link to="/" className="submit-btn" style={{ display: 'inline-flex', alignItems: 'center', gap: '10px' }}>
          <ArrowLeft size={20} />
          Upload New OMR Sheets
        </Link>
      </div>
    </div>
  );
};

export default ResultsPage; 